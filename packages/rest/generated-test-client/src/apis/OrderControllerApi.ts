/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NewOrder,
  Order,
} from '../models';
import {
    NewOrderFromJSON,
    NewOrderToJSON,
    OrderFromJSON,
    OrderToJSON,
} from '../models';

export interface PlaceOrderFormRequest {
    symbol?: string;
    quantity?: number;
    side?: PlaceOrderFormSideEnum;
}

export interface PlaceOrderFormDataRequest {
    symbol: string;
    quantity: number;
    side: PlaceOrderFormDataSideEnum;
}

export interface PlaceOrderJsonRequest {
    newOrder: NewOrder;
}

/**
 * 
 */
export class OrderControllerApi extends runtime.BaseAPI {

    /**
     * Places an order with the given symbol, quantity, and side
     * Place an order from a form
     */
    async placeOrderFormRaw(requestParameters: PlaceOrderFormRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.symbol !== undefined) {
            formParams.append('symbol', requestParameters.symbol as any);
        }

        if (requestParameters.quantity !== undefined) {
            formParams.append('quantity', requestParameters.quantity as any);
        }

        if (requestParameters.side !== undefined) {
            formParams.append('side', requestParameters.side as any);
        }

        const response = await this.request({
            path: `/orders/form`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Places an order with the given symbol, quantity, and side
     * Place an order from a form
     */
    async placeOrderForm(requestParameters: PlaceOrderFormRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.placeOrderFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Places an order with the given symbol, quantity, and side
     * Place an order using FormData
     */
    async placeOrderFormDataRaw(requestParameters: PlaceOrderFormDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.symbol === null || requestParameters.symbol === undefined) {
            throw new runtime.RequiredError('symbol','Required parameter requestParameters.symbol was null or undefined when calling placeOrderFormData.');
        }

        if (requestParameters.quantity === null || requestParameters.quantity === undefined) {
            throw new runtime.RequiredError('quantity','Required parameter requestParameters.quantity was null or undefined when calling placeOrderFormData.');
        }

        if (requestParameters.side === null || requestParameters.side === undefined) {
            throw new runtime.RequiredError('side','Required parameter requestParameters.side was null or undefined when calling placeOrderFormData.');
        }

        const queryParameters: any = {};

        if (requestParameters.symbol !== undefined) {
            queryParameters['symbol'] = requestParameters.symbol;
        }

        if (requestParameters.quantity !== undefined) {
            queryParameters['quantity'] = requestParameters.quantity;
        }

        if (requestParameters.side !== undefined) {
            queryParameters['side'] = requestParameters.side;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/orders/form-data`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Places an order with the given symbol, quantity, and side
     * Place an order using FormData
     */
    async placeOrderFormData(requestParameters: PlaceOrderFormDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.placeOrderFormDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Places an order with the given symbol, quantity, and side
     * Place an order using json
     */
    async placeOrderJsonRaw(requestParameters: PlaceOrderJsonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.newOrder === null || requestParameters.newOrder === undefined) {
            throw new runtime.RequiredError('newOrder','Required parameter requestParameters.newOrder was null or undefined when calling placeOrderJson.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/orders/json`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewOrderToJSON(requestParameters.newOrder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Places an order with the given symbol, quantity, and side
     * Place an order using json
     */
    async placeOrderJson(requestParameters: PlaceOrderJsonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.placeOrderJsonRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PlaceOrderFormSideEnum = {
    Buy: 'BUY',
    Sell: 'SELL'
} as const;
export type PlaceOrderFormSideEnum = typeof PlaceOrderFormSideEnum[keyof typeof PlaceOrderFormSideEnum];
/**
 * @export
 */
export const PlaceOrderFormDataSideEnum = {
    Buy: 'BUY',
    Sell: 'SELL'
} as const;
export type PlaceOrderFormDataSideEnum = typeof PlaceOrderFormDataSideEnum[keyof typeof PlaceOrderFormDataSideEnum];
