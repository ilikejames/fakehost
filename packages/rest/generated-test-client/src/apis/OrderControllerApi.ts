/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Order,
} from '../models';
import {
    OrderFromJSON,
    OrderToJSON,
} from '../models';

export interface PlaceOrderRequest {
    symbol?: string;
    quantity?: number;
    side?: PlaceOrderSideEnum;
}

/**
 * 
 */
export class OrderControllerApi extends runtime.BaseAPI {

    /**
     * Places an order with the given symbol, quantity, and side
     * Place an order
     */
    async placeOrderRaw(requestParameters: PlaceOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.symbol !== undefined) {
            formParams.append('symbol', requestParameters.symbol as any);
        }

        if (requestParameters.quantity !== undefined) {
            formParams.append('quantity', requestParameters.quantity as any);
        }

        if (requestParameters.side !== undefined) {
            formParams.append('side', requestParameters.side as any);
        }

        const response = await this.request({
            path: `/orders/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Places an order with the given symbol, quantity, and side
     * Place an order
     */
    async placeOrder(requestParameters: PlaceOrderRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.placeOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PlaceOrderSideEnum = {
    Buy: 'BUY',
    Sell: 'SELL'
} as const;
export type PlaceOrderSideEnum = typeof PlaceOrderSideEnum[keyof typeof PlaceOrderSideEnum];
